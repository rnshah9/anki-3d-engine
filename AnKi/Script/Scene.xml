<glue>
	<head><![CDATA[// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// WARNING: This file is auto generated.

#include <AnKi/Script/LuaBinder.h>
#include <AnKi/Script/ScriptManager.h>
#include <AnKi/Scene.h>

namespace anki {

template<typename T, typename... TArgs>
static T* newSceneNode(SceneGraph* scene, CString name, TArgs... args)
{
	T* ptr;
	Error err = scene->template newSceneNode<T>(name, ptr, std::forward<TArgs>(args)...);

	if(!err)
	{
		return ptr;
	}
	else
	{
		return nullptr;
	}
}

template<typename T, typename... TArgs>
static T* newEvent(EventManager* eventManager, TArgs... args)
{
	T* ptr;
	Error err = eventManager->template newEvent<T>(ptr, std::forward<TArgs>(args)...);

	if(!err)
	{
		return ptr;
	}
	else
	{
		return nullptr;
	}
}

static SceneGraph* getSceneGraph(lua_State* l)
{
	LuaBinder* binder = nullptr;
	lua_getallocf(l, reinterpret_cast<void**>(&binder));

	SceneGraph* scene = binder->getOtherSystems().m_sceneGraph;
	ANKI_ASSERT(scene);
	return scene;
}

static EventManager* getEventManager(lua_State* l)
{
	return &getSceneGraph(l)->getEventManager();
}

using WeakArraySceneNodePtr = WeakArray<SceneNode*>;
using WeakArrayBodyComponentPtr = WeakArray<BodyComponent*>;
]]></head>

	<classes>
		<!-- Other -->
		<class name="WeakArraySceneNodePtr">
			<methods>
				<method name="getSize">
					<return>U32</return>
				</method>
				<method name="getAt">
					<overrideCall><![CDATA[SceneNode* ret = (*self)[arg0];]]></overrideCall>
					<args><arg>U32</arg></args>
					<return>SceneNode*</return>
				</method>
			</methods>
		</class>

		<class name="WeakArrayBodyComponentPtr">
			<methods>
				<method name="getSize">
					<return>U32</return>
				</method>
				<method name="getAt">
					<overrideCall><![CDATA[BodyComponent* ret = (*self)[arg0];]]></overrideCall>
					<args><arg>U32</arg></args>
					<return>BodyComponent*</return>
				</method>
			</methods>
		</class>

		<!-- Components -->
		<class name="MoveComponent">
			<methods>
				<method name="setLocalOrigin">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getLocalOrigin">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setLocalRotation">
					<args>
						<arg>const Mat3x4&amp;</arg>
					</args>
				</method>
				<method name="getLocalRotation">
					<return>const Mat3x4&amp;</return>
				</method>
				<method name="setLocalScale">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getLocalScale">
					<return>F32</return>
				</method>
				<method name="setLocalTransform">
					<args>
						<arg>const Transform&amp;</arg>
					</args>
				</method>
				<method name="getLocalTransform">
					<return>const Transform&amp;</return>
				</method>
			</methods>
		</class>

		<class name="LightComponent">
			<methods>
				<method name="setDiffuseColor">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getDiffuseColor">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setRadius">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getRadius">
					<return>F32</return>
				</method>
				<method name="setDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getDistance">
					<return>F32</return>
				</method>
				<method name="setInnerAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getInnerAngle">
					<return>F32</return>
				</method>
				<method name="setOuterAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getOuterAngle">
					<return>F32</return>
				</method>
				<method name="setShadowEnabled">
					<args>
						<arg>Bool</arg>
					</args>
				</method>
				<method name="getShadowEnabled">
					<return>Bool</return>
				</method>
			</methods>
		</class>

		<class name="DecalComponent">
			<methods>
				<method name="setDiffuseDecal">
					<args>
						<arg>CString</arg>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="setSpecularRoughnessDecal">
					<args>
						<arg>CString</arg>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="setBoxVolumeSize">
					<args>
						<arg>const Vec3&amp;</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="LensFlareComponent">
			<methods>
				<method name="loadImageResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="setFirstFlareSize">
					<args>
						<arg>const Vec2&amp;</arg>
					</args>
				</method>
				<method name="setColorMultiplier">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="BodyComponent">
			<methods>
				<method name="loadMeshResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="setWorldTransform">
					<args>
						<arg>const Transform&amp;</arg>
					</args>
				</method>
				<method name="getWorldTransform">
					<return>Transform</return>
				</method>
			</methods>
		</class>

		<class name="TriggerComponent">
			<methods>
				<method name="getBodyComponentsEnter">
					<return>WeakArrayBodyComponentPtr</return>
				</method>
				<method name="getBodyComponentsInside">
					<return>WeakArrayBodyComponentPtr</return>
				</method>
				<method name="getBodyComponentsExit">
					<return>WeakArrayBodyComponentPtr</return>
				</method>
			</methods>
		</class>

		<class name="FogDensityComponent">
			<methods>
				<method name="setBoxVolumeSize">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="setSphereVolumeRadius">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getDensity">
					<return>F32</return>
				</method>
			</methods>
		</class>

		<class name="FrustumComponent">
			<methods>
				<method name="setPerspective">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setShadowCascadesDistancePower">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setEffectiveShadowDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="GlobalIlluminationProbeComponent">
			<methods>
				<method name="setBoxVolumeSize">
					<args>
						<arg>const Vec3&amp;</arg>
					</args>
				</method>
				<method name="setCellSize">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getCellSize">
					<return>F32</return>
				</method>
				<method name="setFadeDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getFadeDistance">
					<return>F32</return>
				</method>
			</methods>
		</class>

		<class name="ReflectionProbeComponent">
			<methods>
				<method name="setBoxVolumeSize">
					<args>
						<arg>const Vec3&amp;</arg>
					</args>
				</method>
				<method name="getBoxVolumeSize">
					<return>Vec3</return>
				</method>
			</methods>
		</class>

		<class name="ParticleEmitterComponent">
			<methods>
				<method name="loadParticleEmitterResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
			</methods>
		</class>

		<class name="GpuParticleEmitterComponent">
			<methods>
				<method name="loadParticleEmitterResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
			</methods>
		</class>

		<class name="ModelComponent">
			<methods>
				<method name="loadModelResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
			</methods>
		</class>

		<class name="SkinComponent">
			<methods>
				<method name="loadSkeletonResource">
					<args>
						<arg>CString</arg>
					</args>
					<return>Error</return>
				</method>
			</methods>
		</class>

		<class name="SkyboxComponent">
			<methods>
				<method name="setSolidColor">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="setImage">
					<args>
						<arg>CString</arg>
					</args>
				</method>
				<method name="setMinFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setMaxFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setHeightOfMinFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setHeightOfMaxFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<!-- Nodes -->
		<class name="SceneNode">
			<methods>
				<method name="getName">
					<return>CString</return>
				</method>
				<method name="addChild">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
				<method name="setMarkedForDeletion"></method>
				<method name="tryGetFirstComponentOfType&lt;MoveComponent&gt;" alias="getMoveComponent">
					<return>MoveComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;LightComponent&gt;" alias="getLightComponent">
					<return>LightComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;LensFlareComponent&gt;" alias="getLensFlareComponent">
					<return>LensFlareComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;DecalComponent&gt;" alias="getDecalComponent">
					<return>DecalComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;TriggerComponent&gt;" alias="getTriggerComponent">
					<return>TriggerComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;FogDensityComponent&gt;" alias="getFogDensityComponent">
					<return>FogDensityComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;FrustumComponent&gt;" alias="getFrustumComponent">
					<return>FrustumComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;GlobalIlluminationProbeComponent&gt;" alias="getGlobalIlluminationProbeComponent">
					<return>GlobalIlluminationProbeComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;ReflectionProbeComponent&gt;" alias="getReflectionProbeComponent">
					<return>ReflectionProbeComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;BodyComponent&gt;" alias="getBodyComponent">
					<return>BodyComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;ParticleEmitterComponent&gt;" alias="getParticleEmitterComponent">
					<return>ParticleEmitterComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;GpuParticleEmitterComponent&gt;" alias="getGpuParticleEmitterComponent">
					<return>GpuParticleEmitterComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;ModelComponent&gt;" alias="getModelComponent">
					<return>ModelComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;SkinComponent&gt;" alias="getSkinComponent">
					<return>SkinComponent*</return>
				</method>
				<method name="tryGetFirstComponentOfType&lt;SkyboxComponent&gt;" alias="getSkyboxComponent">
					<return>SkyboxComponent*</return>
				</method>
			</methods>
		</class>
		<class name="ModelNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="PerspectiveCameraNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="PointLightNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SpotLightNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="DirectionalLightNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="StaticCollisionNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ParticleEmitterNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="GpuParticleEmitterNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ReflectionProbeNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="DecalNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="TriggerNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="FogDensityNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="GlobalIlluminationProbeNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SkyboxNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SceneGraph">
			<methods>
				<method name="newPerspectiveCameraNode">
					<overrideCall><![CDATA[PerspectiveCameraNode* ret = newSceneNode<PerspectiveCameraNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>PerspectiveCameraNode*</return>
				</method>
				<method name="newModelNode">
					<overrideCall><![CDATA[ModelNode* ret = newSceneNode<ModelNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>ModelNode*</return>
				</method>
				<method name="newPointLightNode">
					<overrideCall><![CDATA[PointLightNode* ret = newSceneNode<PointLightNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>PointLightNode*</return>
				</method>
				<method name="newSpotLightNode">
					<overrideCall><![CDATA[SpotLightNode* ret = newSceneNode<SpotLightNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>SpotLightNode*</return>
				</method>
				<method name="newDirectionalLightNode">
					<overrideCall><![CDATA[DirectionalLightNode* ret = newSceneNode<DirectionalLightNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>DirectionalLightNode*</return>
				</method>
				<method name="newStaticCollisionNode">
					<overrideCall><![CDATA[StaticCollisionNode* ret = newSceneNode<StaticCollisionNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>StaticCollisionNode*</return>
				</method>
				<method name="newParticleEmitterNode">
					<overrideCall><![CDATA[ParticleEmitterNode* ret = newSceneNode<ParticleEmitterNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>ParticleEmitterNode*</return>
				</method>
				<method name="newGpuParticleEmitterNode">
					<overrideCall><![CDATA[GpuParticleEmitterNode* ret = newSceneNode<GpuParticleEmitterNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>GpuParticleEmitterNode*</return>
				</method>
				<method name="newReflectionProbeNode">
					<overrideCall><![CDATA[ReflectionProbeNode* ret = newSceneNode<ReflectionProbeNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>ReflectionProbeNode*</return>
				</method>
				<method name="newDecalNode">
					<overrideCall><![CDATA[DecalNode* ret = newSceneNode<DecalNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>DecalNode*</return>
				</method>
				<method name="newTriggerNode">
					<overrideCall><![CDATA[TriggerNode* ret = newSceneNode<TriggerNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>TriggerNode*</return>
				</method>
				<method name="newGlobalIlluminationProbeNode">
					<overrideCall><![CDATA[GlobalIlluminationProbeNode* ret = newSceneNode<GlobalIlluminationProbeNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>GlobalIlluminationProbeNode*</return>
				</method>
				<method name="newSkyboxNode">
					<overrideCall><![CDATA[SkyboxNode* ret = newSceneNode<SkyboxNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>SkyboxNode*</return>
				</method>
				<method name="setActiveCameraNode">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
			</methods>
		</class>

		<!-- Events -->
		<class name="Event">
			<methods>
				<method name="getAssociatedSceneNodes">
					<return>WeakArraySceneNodePtr</return>
				</method>
			</methods>
		</class>

		<class name="LightEvent">
			<methods>
				<method name="setIntensityMultiplier">
					<args><arg>const Vec4&amp;</arg></args>
				</method>
				<method name="setFrequency">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="ScriptEvent"/>

		<class name="JitterMoveEvent">
			<methods>
				<method name="setPositionLimits">
					<args>
						<arg>const Vec4&amp;</arg>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="EventManager">
			<methods>
				<method name="newLightEvent">
					<overrideCall><![CDATA[LightEvent* ret = newEvent<LightEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>SceneNode*</arg>
					</args>
					<return>LightEvent*</return>
				</method>

				<method name="newScriptEvent">
					<overrideCall><![CDATA[ScriptEvent* ret = newEvent<ScriptEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>CString</arg>
					</args>
					<return>ScriptEvent*</return>
				</method>

				<method name="newJitterMoveEvent">
					<overrideCall><![CDATA[JitterMoveEvent* ret = newEvent<JitterMoveEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>SceneNode*</arg>
					</args>
					<return>JitterMoveEvent*</return>
				</method>
			</methods>
		</class>
	</classes>
	<functions>
		<function name="getSceneGraph">
			<overrideCall>SceneGraph* ret = getSceneGraph(l);</overrideCall>
			<return>SceneGraph*</return>
		</function>
	</functions>
	<functions>
		<function name="getEventManager">
			<overrideCall>EventManager* ret = getEventManager(l);</overrideCall>
			<return>EventManager*</return>
		</function>
	</functions>
	<tail><![CDATA[} // end namespace anki]]></tail>
</glue>

