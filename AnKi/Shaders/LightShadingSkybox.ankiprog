// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator METHOD 0 1 // 0: solid colod, 1: 2D image

#pragma anki start vert

layout(location = 0) out Vec2 out_uv;

void main()
{
	out_uv = Vec2(gl_VertexID & 1, gl_VertexID >> 1) * 2.0;
	const Vec2 pos = out_uv * 2.0 - 1.0;

	gl_Position = Vec4(pos, 1.0, 1.0);
}

#pragma anki end

#pragma anki start frag

#include <AnKi/Shaders/Functions.glsl>

layout(location = 0) in Vec2 in_uv;
layout(location = 0) out ANKI_RP Vec3 out_color;

#if METHOD == 0
layout(push_constant) uniform b_pc
{
	ANKI_RP Vec3 u_solidColor;
	F32 u_padding;
};
#else
layout(binding = 0) uniform sampler u_trilinearAnySampler;
layout(binding = 1) uniform ANKI_RP texture2D u_envMapTex;

layout(push_constant, row_major) uniform b_pc
{
	Mat4 u_invertedViewProjectionJitterMat;
	Vec3 u_cameraPos;
	F32 u_padding;
};
#endif

void main()
{
#if METHOD == 0
	out_color = u_solidColor;
#else
	const F32 depth = 1.0;
	const Vec2 ndc = UV_TO_NDC(in_uv);
	const Vec4 worldPos4 = u_invertedViewProjectionJitterMat * Vec4(ndc, depth, 1.0);
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 eyeToFrag = normalize(worldPos - u_cameraPos);

	const Vec2 uv = equirectangularMapping(eyeToFrag);

	// When uv is close to the edge of the texture the other quads might be in the oposit coordinate. Then the
	// derivatives will be huge causing the texture to use the highest mip and thus create a visible seam. To fix this
	// find when the derivatives are large and do some manual work to fix it
	const Vec2 dx = abs(dFdx(uv));
	const F32 maxD = max(dx.x, dx.y);

	const F32 bias = (maxD > 0.9) ? -100.0f : 0.0f;

	out_color = texture(u_envMapTex, u_trilinearAnySampler, uv, bias).rgb;
#endif
}

#pragma anki end
