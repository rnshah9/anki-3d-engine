// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// This shader accumulates the lighting for every cluster fraction

#pragma anki mutator ENABLE_SHADOWS 0 1

ANKI_SPECIALIZATION_CONSTANT_UVEC3(VOLUME_SIZE, 0u);
ANKI_SPECIALIZATION_CONSTANT_UVEC2(TILE_COUNT, 3u);
ANKI_SPECIALIZATION_CONSTANT_U32(Z_SPLIT_COUNT, 5u);
ANKI_SPECIALIZATION_CONSTANT_U32(FINAL_Z_SPLIT, 6u);

#pragma anki start comp

const F32 PHASE_FUNCTION_ANISOTROPY = 0.3;

const UVec3 WORKGROUP_SIZE = UVec3(8, 8, 8);
layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = WORKGROUP_SIZE.z) in;

layout(set = 0, binding = 0) uniform sampler u_linearAnyRepeatSampler;
layout(set = 0, binding = 1) uniform sampler u_linearAnyClampSampler;

layout(set = 0, binding = 2) writeonly uniform image3D u_volume;
layout(set = 0, binding = 3) uniform texture2D u_noiseTex;
layout(set = 0, binding = 4) uniform texture3D u_prevVolume;

#define CLUSTERED_SHADING_SET 0u
#define CLUSTERED_SHADING_UNIFORMS_BINDING 5u
#define CLUSTERED_SHADING_LIGHTS_BINDING 6u
#define CLUSTERED_SHADING_GI_BINDING 9u
#define CLUSTERED_SHADING_FOG_BINDING 11u
#define CLUSTERED_SHADING_CLUSTERS_BINDING 12u
#include <AnKi/Shaders/ClusteredShadingCommon.glsl>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>

layout(push_constant, std140) uniform b_pc
{
	VolumetricLightingUniforms u_fogUnis;
};

Vec3 g_globalInvocationID = Vec3(gl_GlobalInvocationID);

Vec3 readRand()
{
	Vec3 random = textureLod(u_noiseTex, u_linearAnyRepeatSampler, (g_globalInvocationID.xy + 0.5) / 64.0, 0.0).rgb;
	random = animateBlueNoise(random, u_clusteredShading.m_frame);

	return random;
}

Vec3 worldPosInsideClusterAndZViewSpace(Vec3 relativePos, out F32 negativeZViewSpace, out Vec3 uvw)
{
	// Compute the linear depth
	const F32 maxLinearDepth = F32(FINAL_Z_SPLIT + 1u) / F32(Z_SPLIT_COUNT);
	const F32 linearDepthFraction = maxLinearDepth / F32(VOLUME_SIZE.z);
	const F32 linearDepthNear = g_globalInvocationID.z * linearDepthFraction;
	const F32 linearDepthFar = (g_globalInvocationID.z + 1.0) * linearDepthFraction;
	const F32 linearDepth = mix(linearDepthNear, linearDepthFar, relativePos.z);
	uvw.z = linearDepth;

	// Z view space
	negativeZViewSpace =
		linearDepth * (u_clusteredShading.m_far - u_clusteredShading.m_near) + u_clusteredShading.m_near;
	const F32 zViewSpace = -negativeZViewSpace;

	// Get the position in view space
	const Vec2 uv = mix(g_globalInvocationID.xy, g_globalInvocationID.xy + 1.0, relativePos.xy) / Vec2(VOLUME_SIZE.xy);
	uvw.xy = uv;
	const Vec2 xyViewSpace = UV_TO_NDC(uv) * u_clusteredShading.m_matrices.m_unprojectionParameters.xy * zViewSpace;

	// Get the final world pos
	const Vec3 worldPos = u_clusteredShading.m_matrices.m_cameraTransform * Vec4(xyViewSpace, zViewSpace, 1.0);

	return worldPos;
}

Vec3 worldPosInsideCluster(Vec3 relativePos)
{
	F32 unused;
	Vec3 unused1;
	return worldPosInsideClusterAndZViewSpace(relativePos, unused, unused1);
}

// https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html
F32 phaseFunction(Vec3 viewDir, Vec3 lightDir, F32 g)
{
	const F32 g2 = g * g;
	const F32 cosTheta = max(0.0, dot(viewDir, lightDir));
	const F32 cosTheta2 = cosTheta * cosTheta;

	const F32 a = (3.0 * (1.0 - g2)) / (2.0 * (2.0 + g2));
	const F32 b = (1.0 + cosTheta2) / pow(1.0 + g2 - 2.0 * g * cosTheta, 3.0 / 2.0);

	return saturate(a * b);
}

Vec4 accumulateLightsAndFog(Cluster cluster, Vec3 worldPos, F32 negativeZViewSpace)
{
	Vec3 color = Vec3(0.0);
	const Vec3 viewDir = normalize(u_clusteredShading.m_cameraPosition - worldPos);

	// Dir light
	const DirectionalLight dirLight = u_clusteredShading.m_directionalLight;
	if(dirLight.m_active != 0u)
	{
		F32 factor = phaseFunction(viewDir, dirLight.m_direction, PHASE_FUNCTION_ANISOTROPY);

#if ENABLE_SHADOWS
		if(dirLight.m_cascadeCount > 0u && negativeZViewSpace < dirLight.m_effectiveShadowDistance)
		{
			const U32 cascadeIdx =
				computeShadowCascadeIndex(negativeZViewSpace, dirLight.m_shadowCascadesDistancePower,
										  dirLight.m_effectiveShadowDistance, dirLight.m_cascadeCount);

			factor *=
				computeShadowFactorDirLight(dirLight, cascadeIdx, worldPos, u_shadowAtlasTex, u_linearAnyClampSampler);
		}
#endif

		color += dirLight.m_diffuseColor * factor;
	}

	// Point lights
	ANKI_LOOP while(cluster.m_pointLightsMask != ExtendedClusterObjectMask(0))
	{
		const I32 idx = findLSB2(cluster.m_pointLightsMask);
		cluster.m_pointLightsMask &= ~(ExtendedClusterObjectMask(1) << ExtendedClusterObjectMask(idx));
		const PointLight light = u_pointLights2[idx];

		const Vec3 frag2Light = light.m_position - worldPos;
		F32 factor = computeAttenuationFactor(light.m_squareRadiusOverOne, frag2Light);

		factor *= phaseFunction(viewDir, normalize(worldPos - light.m_position), PHASE_FUNCTION_ANISOTROPY);

#if ENABLE_SHADOWS
		if(light.m_shadowAtlasTileScale >= 0.0)
		{
			factor *= computeShadowFactorPointLight(light, frag2Light, u_shadowAtlasTex, u_linearAnyClampSampler);
		}
#endif

		color += light.m_diffuseColor * factor;
	}

	// Spot lights
	ANKI_LOOP while(cluster.m_spotLightsMask != ExtendedClusterObjectMask(0))
	{
		const I32 idx = findLSB2(cluster.m_spotLightsMask);
		cluster.m_spotLightsMask &= ~(ExtendedClusterObjectMask(1) << ExtendedClusterObjectMask(idx));
		const SpotLight light = u_spotLights[idx];

		const Vec3 frag2Light = light.m_position - worldPos;
		F32 factor = computeAttenuationFactor(light.m_squareRadiusOverOne, frag2Light);

		const Vec3 l = normalize(frag2Light);

		factor *= computeSpotFactor(l, light.m_outerCos, light.m_innerCos, light.m_direction);

		factor *= phaseFunction(viewDir, light.m_direction, PHASE_FUNCTION_ANISOTROPY);

#if ENABLE_SHADOWS
		if(light.m_shadowLayer != MAX_U32)
		{
			factor *= computeShadowFactorSpotLight(light, worldPos, u_shadowAtlasTex, u_linearAnyClampSampler);
		}
#endif

		color += light.m_diffuseColor * factor;
	}

	// Indirect diffuse GI
	{
		Vec3 diffIndirect;

		if(bitCount(cluster.m_giProbesMask) == 1)
		{
			// Only one probe, do a fast path without blend weight

			const GlobalIlluminationProbe probe = u_giProbes[findLSB2(cluster.m_giProbesMask)];

			// Sample
			diffIndirect = sampleGlobalIllumination(worldPos, viewDir, probe, u_globalIlluminationTextures,
													u_linearAnyClampSampler);
		}
		else
		{
			// Zero or more than one probes, do a slow path that blends them together

			F32 totalBlendWeight = EPSILON;
			diffIndirect = Vec3(0.0);

			// Loop probes
			ANKI_LOOP while(cluster.m_giProbesMask != 0u)
			{
				const U32 idx = U32(findLSB2(cluster.m_giProbesMask));
				cluster.m_giProbesMask &= ~(1u << idx);
				const GlobalIlluminationProbe probe = u_giProbes[idx];

				// Compute blend weight
				const F32 blendWeight =
					computeProbeBlendWeight(worldPos, probe.m_aabbMin, probe.m_aabbMax, probe.m_fadeDistance);
				totalBlendWeight += blendWeight;

				// Sample
				const Vec3 c = sampleGlobalIllumination(worldPos, viewDir, probe, u_globalIlluminationTextures,
														u_linearAnyClampSampler);
				diffIndirect += c * blendWeight;
			}

			// Normalize
			diffIndirect /= totalBlendWeight;
		}

		diffIndirect *= PI; // Irradiance is pre-divided with PI so fix it

		color += diffIndirect;
	}

	// Fog density
	F32 fogDensity = 0.0;
	{
		// Calculate the constant density
		const F32 fogFactor = saturate((worldPos.y - u_fogUnis.m_minHeight) * u_fogUnis.m_oneOverMaxMinusMinHeight);
		fogDensity = mix(u_fogUnis.m_densityAtMinHeight, u_fogUnis.m_densityAtMaxHeight, fogFactor);

		ANKI_LOOP while(cluster.m_fogDensityVolumesMask != 0u)
		{
			const U32 idx = U32(findLSB2(cluster.m_fogDensityVolumesMask));
			cluster.m_fogDensityVolumesMask &= ~(1u << idx);
			const FogDensityVolume vol = u_fogDensityVolumes[idx];

			F32 factor;
			ANKI_BRANCH if(vol.m_isBox == 1u)
			{
				factor = computeProbeBlendWeight(worldPos, vol.m_aabbMinOrSphereCenter,
												 vol.m_aabbMaxOrSphereRadiusSquared, 0.2);
			}
			else
			{
				const Vec3 diff = worldPos - vol.m_aabbMinOrSphereCenter;
				F32 distSq = dot(diff, diff) / vol.m_aabbMaxOrSphereRadiusSquared.x;
				distSq = min(1.0, distSq);
				factor = 1.0 - distSq;
			}

			fogDensity += vol.m_density * factor;
		}
	}

	return Vec4(color, fogDensity);
}

void main()
{
	if(any(greaterThanEqual(gl_GlobalInvocationID.xyz, VOLUME_SIZE)))
	{
		return;
	}

	// Find a random pos inside the cluster
	F32 negativeZViewSpace;
	Vec3 uvw;
	const Vec3 worldPos = worldPosInsideClusterAndZViewSpace(readRand(), negativeZViewSpace, uvw);

	// Get the cluster
	const UVec2 tileIdxXY = UVec2(uvw.xy * Vec2(TILE_COUNT));
	const U32 tileIdx = tileIdxXY.y * TILE_COUNT.x + tileIdxXY.x;
	Cluster cluster = u_clusters[tileIdx];

	const U32 zSplitIdx = U32(uvw.z * F32(Z_SPLIT_COUNT));
	const Cluster split = u_clusters[TILE_COUNT.x * TILE_COUNT.y + zSplitIdx];

	cluster.m_pointLightsMask |= split.m_pointLightsMask;
	cluster.m_spotLightsMask |= split.m_spotLightsMask;
	cluster.m_giProbesMask |= split.m_giProbesMask;
	cluster.m_fogDensityVolumesMask |= split.m_fogDensityVolumesMask;

	// Get lighting
	Vec4 lightAndFog = accumulateLightsAndFog(cluster, worldPos, negativeZViewSpace);

	// Read the prev result
	{
		// Better get a new world pos in the center of the cluster. Using worldPos creates noisy results
		const Vec3 midWPos = worldPosInsideCluster(Vec3(0.5));

		// Project
		const Vec4 prevClipPos4 = u_clusteredShading.m_previousMatrices.m_viewProjection * Vec4(midWPos, 1.0);
		const Vec3 prevClipPos = prevClipPos4.xyz / prevClipPos4.w;

		// Read prev
		if(all(greaterThan(prevClipPos.xy, Vec2(-1.0))) && all(lessThan(prevClipPos.xy, Vec2(1.0))))
		{
			const F32 linearDepth = linearizeDepth(prevClipPos.z, u_clusteredShading.m_near, u_clusteredShading.m_far);
			const Vec3 uvw =
				Vec3(NDC_TO_UV(prevClipPos.xy), linearDepth * (F32(Z_SPLIT_COUNT) / F32(FINAL_Z_SPLIT + 1u)));
			const Vec4 history = textureLod(u_prevVolume, u_linearAnyClampSampler, uvw, 0.0);
			lightAndFog = mix(history, lightAndFog, 1.0 / 16.0);
		}
	}

	// Write result
	imageStore(u_volume, IVec3(gl_GlobalInvocationID), lightAndFog);
}

#pragma anki end
